"""The Battery Energy Tracker integration."""
import logging
import asyncio
import voluptuous as vol

from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant
import homeassistant.helpers.config_validation as cv

from .const import (
    DOMAIN,
    CONF_BATTERY_COUNT,
    CONF_CHARGE_RATE,
    CONF_ENTITY_PATTERNS,
    CONF_SCALE_FACTOR,
    CONF_MANUAL_ENTITIES,
    CONF_STARTUP_DELAY,
    DEFAULT_CHARGE_RATE,
    DEFAULT_SCALE_FACTOR,
)
from .services import async_register_services, async_unregister_services

_LOGGER = logging.getLogger(__name__)

CONFIG_SCHEMA = vol.Schema(
    {
        DOMAIN: vol.Schema(
            {
                vol.Optional(CONF_BATTERY_COUNT, default=4): cv.positive_int,
                vol.Optional(CONF_CHARGE_RATE, default=DEFAULT_CHARGE_RATE): cv.positive_float,
                vol.Optional(CONF_ENTITY_PATTERNS): {
                    vol.Optional("discharge"): cv.string,
                    vol.Optional("charge"): cv.string,
                    vol.Optional("current"): cv.string,
                },
                vol.Optional(CONF_SCALE_FACTOR, default=DEFAULT_SCALE_FACTOR): cv.positive_float,
                vol.Optional(CONF_MANUAL_ENTITIES): {
                    vol.Required("discharge"): [cv.entity_id],
                    vol.Required("charge"): [cv.entity_id],
                    vol.Required("current"): [cv.entity_id],
                },
                vol.Optional(CONF_STARTUP_DELAY, default=0): cv.positive_int,
            }
        )
    },
    extra=vol.ALLOW_EXTRA,
)

async def async_setup(hass: HomeAssistant, config: dict) -> bool:
    """Set up the Battery Energy Tracker integration."""
    _LOGGER.info("Setting up Battery Energy Tracker integration")
    
    if DOMAIN not in config:
        _LOGGER.info("No configuration found for Battery Energy Tracker")
        return True
    
    domain_config = config[DOMAIN]
    
    # Setup and load the sensors
    hass.async_create_task(
        hass.helpers.discovery.async_load_platform(
            "sensor", DOMAIN, domain_config, config
        )
    )
    
    _LOGGER.info("Battery Energy Tracker integration setup completed")
    
    return True

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up from a config entry."""
    _LOGGER.debug(f"Setting up config entry: {entry.title}")
    
    # This is a placeholder for future config entry support
    # Currently, we only support yaml configuration
    
    return True

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    _LOGGER.debug(f"Unloading config entry: {entry.title}")
    
    # Unregister services
    await async_unregister_services(hass)
    
    # Remove coordinator
    if DOMAIN in hass.data:
        del hass.data[DOMAIN]
    
    return True